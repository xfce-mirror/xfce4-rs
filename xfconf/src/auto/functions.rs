// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files.gtk (https://github.com/gtk-rs/gir-files)
// from gir-files.xfce
// DO NOT EDIT

use crate::Channel;
use glib::{prelude::*, translate::*};

/// Initializes the Xfconf library. Can be called multiple times with no
/// adverse effects.
///
/// # Returns
///
/// [`true`] if the library was initialized succesfully, [`false`] on
///  error. If there is an error `error` will be set.
#[doc(alias = "xfconf_init")]
pub fn init() -> Result<(), glib::Error> {
    unsafe {
        let mut error = std::ptr::null_mut();
        let is_ok = ffi::xfconf_init(&mut error);
        debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
        if error.is_null() {
            Ok(())
        } else {
            Err(from_glib_full(error))
        }
    }
}

/// Lists all channels known in the Xfconf configuration store.
///
/// # Returns
///
/// A newly-allocated array of strings.
///  Free with `g_strfreev()` when no longer needed.
#[doc(alias = "xfconf_list_channels")]
pub fn list_channels() -> Vec<glib::GString> {
    unsafe { FromGlibPtrContainer::from_glib_none(ffi::xfconf_list_channels()) }
}

/// Binds an Xfconf property to a [`glib::Object`][crate::glib::Object] property. If the property
/// is changed via either the [`glib::Object`][crate::glib::Object] or Xfconf, the corresponding
/// property will also be updated.
///
/// Note that `xfconf_property_type` is required since `xfconf_property`
/// may or may not already exist in the Xfconf store. The type of
/// `object_property` will be determined automatically. If the two
/// types do not match, a conversion will be attempted.
/// ## `channel`
/// An [`Channel`][crate::Channel].
/// ## `xfconf_property`
/// A property on `channel`.
/// ## `xfconf_property_type`
/// The type of `xfconf_property`.
/// ## `object`
/// A [`glib::Object`][crate::glib::Object].
/// ## `object_property`
/// A valid property on `object`.
///
/// # Returns
///
/// an ID number that can be used to later remove the
///  binding.
#[doc(alias = "xfconf_g_property_bind")]
pub fn property_bind(
    channel: &Channel,
    xfconf_property: &str,
    xfconf_property_type: glib::types::Type,
    object: &impl IsA<glib::Object>,
    object_property: &str,
) -> libc::c_ulong {
    unsafe {
        ffi::xfconf_g_property_bind(
            channel.to_glib_none().0,
            xfconf_property.to_glib_none().0,
            xfconf_property_type.into_glib(),
            object.as_ref().to_glib_none().0,
            object_property.to_glib_none().0,
        )
    }
}

/// Binds an Xfconf property to a [`glib::Object`][crate::glib::Object] property of type
/// GDK_TYPE_COLOR (aka a `GdkColor` struct). If the property
/// is changed via either the [`glib::Object`][crate::glib::Object] or Xfconf, the corresponding
/// property will also be updated.
///
/// This is a special-case binding; the GdkColor struct is not
/// ideal as-is for binding to a property, so it is stored in the
/// Xfconf store as four 16-bit unsigned ints (red, green, blue, alpha).
/// Since GdkColor (currently) only supports RGB and not RGBA,
/// the last value will always be set to 0xFFFF.
/// ## `channel`
/// An [`Channel`][crate::Channel].
/// ## `xfconf_property`
/// A property on `channel`.
/// ## `object`
/// A [`glib::Object`][crate::glib::Object].
/// ## `object_property`
/// A valid property on `object`.
///
/// # Returns
///
/// an ID number that can be used to later remove the
///  binding.
#[doc(alias = "xfconf_g_property_bind_gdkcolor")]
pub fn property_bind_gdkcolor(
    channel: &Channel,
    xfconf_property: &str,
    object: &impl IsA<glib::Object>,
    object_property: &str,
) -> libc::c_ulong {
    unsafe {
        ffi::xfconf_g_property_bind_gdkcolor(
            channel.to_glib_none().0,
            xfconf_property.to_glib_none().0,
            object.as_ref().to_glib_none().0,
            object_property.to_glib_none().0,
        )
    }
}

/// Binds an Xfconf property to a [`glib::Object`][crate::glib::Object] property of type
/// GDK_TYPE_RGBA (aka a `GdkRGBA` struct). If the property
/// is changed via either the [`glib::Object`][crate::glib::Object] or Xfconf, the corresponding
/// property will also be updated.
///
/// This is a special-case binding; the GdkRGBA struct is not
/// ideal as-is for binding to a property, so it is stored in the
/// Xfconf store as four 16-bit unsigned ints (red, green, blue, alpha).
/// ## `channel`
/// An [`Channel`][crate::Channel].
/// ## `xfconf_property`
/// A property on `channel`.
/// ## `object`
/// A [`glib::Object`][crate::glib::Object].
/// ## `object_property`
/// A valid property on `object`.
///
/// # Returns
///
/// an ID number that can be used to later remove the
///  binding.
#[doc(alias = "xfconf_g_property_bind_gdkrgba")]
pub fn property_bind_gdkrgba(
    channel: &Channel,
    xfconf_property: &str,
    object: &impl IsA<glib::Object>,
    object_property: &str,
) -> libc::c_ulong {
    unsafe {
        ffi::xfconf_g_property_bind_gdkrgba(
            channel.to_glib_none().0,
            xfconf_property.to_glib_none().0,
            object.as_ref().to_glib_none().0,
            object_property.to_glib_none().0,
        )
    }
}

/// Removes an Xfconf/GObject property binding based on the binding
/// ID number. See [`property_bind()`][crate::property_bind()].
/// ## `id`
/// A binding ID number.
#[doc(alias = "xfconf_g_property_unbind")]
pub fn property_unbind(id: libc::c_ulong) {
    unsafe {
        ffi::xfconf_g_property_unbind(id);
    }
}

/// Unbinds all Xfconf channel bindings (see [`property_bind()`][crate::property_bind()])
/// to `object`. If `object` is an [`Channel`][crate::Channel], it will unbind all
/// xfconf properties on that channel. If `object` is a regular [`glib::Object`][crate::glib::Object]
/// with properties bound to a channel, all those bindings will be
/// removed.
/// ## `channel_or_object`
/// A [`glib::Object`][crate::glib::Object] or [`Channel`][crate::Channel].
#[doc(alias = "xfconf_g_property_unbind_all")]
pub fn property_unbind_all(channel_or_object: &impl IsA<glib::Object>) {
    unsafe {
        ffi::xfconf_g_property_unbind_all(channel_or_object.as_ref().to_glib_none().0);
    }
}

/// Causes an Xfconf channel previously bound to a [`glib::Object`][crate::glib::Object] property
/// (see [`property_bind()`][crate::property_bind()]) to no longer be bound.
/// ## `channel`
/// An [`Channel`][crate::Channel].
/// ## `xfconf_property`
/// A bound property on `channel`.
/// ## `object`
/// A [`glib::Object`][crate::glib::Object].
/// ## `object_property`
/// A bound property on `object`.
#[doc(alias = "xfconf_g_property_unbind_by_property")]
pub fn property_unbind_by_property(
    channel: &Channel,
    xfconf_property: &str,
    object: &impl IsA<glib::Object>,
    object_property: &str,
) {
    unsafe {
        ffi::xfconf_g_property_unbind_by_property(
            channel.to_glib_none().0,
            xfconf_property.to_glib_none().0,
            object.as_ref().to_glib_none().0,
            object_property.to_glib_none().0,
        );
    }
}

/// Shuts down and frees any resources consumed by the Xfconf library.
/// If [`init()`][crate::init()] is called multiple times, [`shutdown()`][crate::shutdown()] must be
/// called an equal number of times to shut down the library.
#[doc(alias = "xfconf_shutdown")]
pub fn shutdown() {
    unsafe {
        ffi::xfconf_shutdown();
    }
}

/// Retrieves a 16-bit signed value from `value`.
/// ## `value`
/// A [`glib::Value`][crate::glib::Value].
///
/// # Returns
///
/// A gint16.
#[doc(alias = "xfconf_g_value_get_int16")]
pub fn value_get_int16(value: &glib::Value) -> i16 {
    unsafe { ffi::xfconf_g_value_get_int16(value.to_glib_none().0) }
}

/// Retrieves a 16-bit unsigned value from `value`.
/// ## `value`
/// A [`glib::Value`][crate::glib::Value].
///
/// # Returns
///
/// A guint16.
#[doc(alias = "xfconf_g_value_get_uint16")]
pub fn value_get_uint16(value: &glib::Value) -> u16 {
    unsafe { ffi::xfconf_g_value_get_uint16(value.to_glib_none().0) }
}

/// Sets `value` using a signed 16-bit integer.
/// ## `value`
/// A [`glib::Value`][crate::glib::Value].
/// ## `v_int16`
/// A gint16.
#[doc(alias = "xfconf_g_value_set_int16")]
pub fn value_set_int16(value: &mut glib::Value, v_int16: i16) {
    unsafe {
        ffi::xfconf_g_value_set_int16(value.to_glib_none_mut().0, v_int16);
    }
}

/// Sets `value` using an unsigned 16-bit integer.
/// ## `value`
/// A [`glib::Value`][crate::glib::Value].
/// ## `v_uint16`
/// A guint16.
#[doc(alias = "xfconf_g_value_set_uint16")]
pub fn value_set_uint16(value: &mut glib::Value, v_uint16: u16) {
    unsafe {
        ffi::xfconf_g_value_set_uint16(value.to_glib_none_mut().0, v_uint16);
    }
}
